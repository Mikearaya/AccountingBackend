/*
 * @CreateTime: May 14, 2019 1:27 PM
 * @Author:  Mikael Araya
 * @Contact: MikaelAraya12@gmail.com
 * @Last Modified By:  Mikael Araya
 * @Last Modified Time: May 14, 2019 2:09 PM
 * @Description: Modify Here, Please 
 */
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AccountingBackend.Application.AccountTypes.Models;
using AccountingBackend.Application.AccountTypes.Queries.GetAccountType;
using AccountingBackend.Application.AccountTypes.Queries.GetAccountTypeList;
using AccountingBackend.Application.Exceptions;
using Xunit;

namespace AccountingBackend.Application.Test.AccountTypes.Queries.GetAccountTypeList {
    public class GetAccountTypeListQueryHandlerShould : DatabaseTestBase {

        /// <summary>
        /// test the successful return of account types list
        /// </summary>
        /// <returns></returns>
        [Fact]
        public async Task ReturnListOfAccountTypesSuccessFuly () {
            // Arrange
            GetAccountTypeListQuery query = new GetAccountTypeListQuery ();
            GetAccountTypeListQueryHandler handler = new GetAccountTypeListQueryHandler (_Database);
            // Act
            var result = await handler.Handle (query, CancellationToken.None);

            // Assert
            Assert.IsType<List<AccountTypeView>> (result);
            Assert.True ((result as List<AccountTypeView>).Count () > 0);
        }

        /// <summary>
        /// test the return of account type list generated by user only
        /// </summary>
        /// <returns></returns>

        [Fact]
        public async Task ReturnOnlyAccountsListCreatedByUser () {
            GetAccountTypeListQuery query = new GetAccountTypeListQuery ();
            GetAccountTypeListQueryHandler handler = new GetAccountTypeListQueryHandler (_Database);
            // Act
            var result = await handler.Handle (query, CancellationToken.None);

            // Assert
            Assert.False (result.Any (a => a.TypeOfId == 0));
        }

    }
}